name: Repo Manager

on:
  workflow_call:
    secrets:
      REPO_MGR_PRIVATE_KEY:
        description: GitHub App to generate ephemeral access tokens
        required: false
    inputs:
      owner:
        description: The organization to manage, uses the organization of the triggering workflow if not provided
        type: string
        required: false
      topics:
        description: Comma-separated list of repository topics for filtering
        type: string
        required: false
        default: repo-manager
      topics-operator:
        description: Logic operator to use when filtering repositories by topics (OR or AND)
        type: string
        required: false
        default: AND
      action:
        description: "Action to run (validate, check, or apply)"
        type: string
        required: false
        default: "check"
  workflow_dispatch:
    inputs:
      org:
        description: The organization to manage, uses the organization of the triggering workflow if not provided
        type: string
        required: false
      topics:
        description: Comma-separated list of repository topics for filtering
        type: string
        required: false
        default: repo-manager
      topics-operator:
        description: Logic operator to use when filtering repositories by topics (OR or AND)
        type: choice
        required: false
        options:
          - AND
          - OR
        default: AND
      action:
        description: "Action to run (validate, check, or apply)"
        type: choice
        required: false
        options:
          - validate
          - check
          - apply
        default: check

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}
  # cancel jobs in progress for updated PRs, but not merge or tag events
  cancel-in-progress: ${{ github.event.action == 'synchronize' }}

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      repos: ${{ steps.get-repos.outputs.repos }}
      action: ${{ inputs.action || steps.set-action.outputs.action || 'check' }}

    steps:
      # https://github.com/marketplace/actions/github-app-token
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: github-app-token
        with:
          app_id: ${{ vars.REPO_MGR_APP_ID }}
          installation_retrieval_mode: organization
          installation_retrieval_payload: ${{ inputs.owner || github.event.repository.owner.login }}
          private_key: ${{ secrets.REPO_MGR_PRIVATE_KEY }}
          permissions: >-
            {
              "metadata": "read"
            }

      # https://github.com/raven-actions/get-repos
      - name: Get organization repositories
        id: get-repos
        uses: raven-actions/get-repos@v1.0.2
        with:
          github-token: ${{ steps.github-app-token.outputs.token }}
          owner: ${{ inputs.owner || github.event.repository.owner.login }}
          topics: ${{ inputs.topics || 'repo-manager' }}
          operator: ${{ inputs.topics-operator || 'AND' }}
          format: json
          matrix-use: true

      - name: Set action to "apply"
        id: set-action
        if: inputs.action == '' && github.event_name == 'schedule'
        run: echo 'action=apply' >> $GITHUB_OUTPUT

  manage:
    name: Manage
    runs-on: ubuntu-latest
    needs: [prepare]
    if: ${{ needs.prepare.outputs.repos != '[]' }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.repo.full_name }}

    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        repo: ${{ fromJson(needs.prepare.outputs.repos) }}

    steps:
      # https://github.com/marketplace/actions/github-app-token
      - name: Generate GitHub App installation token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: github-app-token
        with:
          app_id: ${{ vars.REPO_MGR_APP_ID }}
          installation_retrieval_mode: organization
          installation_retrieval_payload: ${{ inputs.owner || github.event.repository.owner.login }}
          private_key: ${{ secrets.REPO_MGR_PRIVATE_KEY }}
          repositories: >-
            [
              "${{ matrix.repo.name }}"
            ]
          permissions: >-
            {
              "administration": "write",
              "contents": "read",
              "metadata": "read"
            }

      # Checkout the repo that triggered the workflow. This may be the .github repo
      # at the root of an organization, or some other repo being used for testing.
      # Either way, we need to checkout the repo that triggered the workflow so we
      # have a default settings.yml file to apply.
      # https://github.com/actions/checkout
      - name: Checkout ${{ github.event.repository.full_name }}
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          repository: ${{ github.event.repository.full_name }}
          path: ${{ github.event.repository.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Checkout the target repo. This is the repo that we are managing.
      # If it has a .github/settings.yml, we will use that instead of the default
      # from the triggering repo.
      # https://github.com/actions/checkout
      - name: Checkout ${{ matrix.repo.full_name }}
        # avoid checking out the same repo twice
        if: matrix.repo.full_name != github.event.repository.full_name
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          repository: ${{ matrix.repo.full_name }}
          ref: ${{ matrix.repo.default_branch }}
          path: ${{ matrix.repo.full_name }}
          token: ${{ steps.github-app-token.outputs.token }}

      # Create a symlink to the preferred settings file.
      - name: Select settings file
        env:
          FILES: >-
            ${{ github.workspace}}/${{ github.event.repository.full_name }}/repo-settings.yml
            ${{ github.workspace}}/${{ github.event.repository.full_name }}/.github/settings.yml
        run: |
          mkdir -p .github

          if [ -f .github/settings.yml ]; then
            exit 0
          fi

          for file in $FILES; do
            if [ -f "$file" ]; then
              ln -sv $file .github/settings.yml
              break
            fi
          done

      - name: Substitute env vars
        working-directory: ${{ matrix.repo.full_name }}/.github
        env:
          DEFAULT_BRANCH: ${{ matrix.repo.default_branch }}
        run: |
          envsubst < settings.yml > settings.yml.tmp
          mv settings.yml.tmp settings.yml
          yq . settings.yml

      - name: Save default branch required checks
        continue-on-error: true
        id: get-branch-protection
        working-directory: ${{ matrix.repo.full_name }}/.github
        env:
          GH_DEBUG: "true"
          GH_PAGER: "cat"
          GH_PROMPT_DISABLED: "true"
          GH_TOKEN: ${{ steps.github-app-token.outputs.token }}
        run: |
          gh api repos/${{ matrix.repo.full_name }}/branches/${{ matrix.repo.default_branch }}/protection --jq '.required_status_checks.contexts' | yq eval -P > response.yml

      - name: Remove any ResinCI checks
        if: steps.get-branch-protection.outcome == 'success'
        working-directory: ${{ matrix.repo.full_name }}/.github
        run: |
          yq e 'del(.[] | select(. == "ResinCI*"))' response.yml > response.yml.tmp
          mv response.yml.tmp response.yml

      - name: Merge default branch required checks
        if: steps.get-branch-protection.outcome == 'success'
        working-directory: ${{ matrix.repo.full_name }}/.github
        run: |
          yq eval-all '.branches[0].protection.required_status_checks.checks += load("response.yml") | 
            .branches[0].protection.required_status_checks.checks |= unique' settings.yml > settings.yml.tmp
          mv settings.yml.tmp settings.yml
          yq . settings.yml

      # https://github.com/elstudio/actions-settings
      # https://github.com/repository-settings/app
      # https://github.com/apps/settings
      - name: Checkout repository-settings/app
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          repository: repository-settings/app
          ref: v2.1.2
          path: repository-settings/app
          token: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/elstudio/actions-settings
      # https://github.com/repository-settings/app
      # https://github.com/apps/settings
      - name: Install npm dependencies
        working-directory: repository-settings/app
        run: npm ci

      # https://github.com/elstudio/actions-settings
      # https://github.com/repository-settings/app
      # https://github.com/apps/settings
      - name: Apply repository settings
        working-directory: repository-settings/app
        env:
          # https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
          GITHUB_TOKEN: ${{ steps.github-app-token.outputs.token }}
          ACTIONS_STEP_DEBUG: true
          LOG_LEVEL: debug
          # # The name of the event that triggered the workflow. For example, workflow_dispatch.
          # GITHUB_EVENT_NAME:
          # # The path to the file on the runner that contains the full event webhook payload. For example, /github/workflow/event.json.
          # GITHUB_EVENT_PATH:
        run: |
          ./node_modules/.bin/probot receive -e $GITHUB_EVENT_NAME -p $GITHUB_EVENT_PATH -t $GITHUB_TOKEN index.js

        # Usage: probot <command> [options]

        # Options:
        #   -V, --version   output the version number
        #   -h, --help      display help for command

        # Commands:
        #   run             run the bot
        #   receive         Receive a single event and payload
        #   help [command]  display help for command

        # Usage: probot-run [options] <apps...>

        # Options:
        #   -p, --port <n>             Port to start the server on (default: "3000")
        #   -H --host <host>           Host to start the server on
        #   -W, --webhook-proxy <url>  URL of the webhook proxy service.`
        #   -w, --webhook-path <path>  URL path which receives webhooks. Ex: `/webhook`
        #   -a, --app <id>             ID of the GitHub App
        #   -s, --secret <secret>      Webhook secret of the GitHub App
        #   -P, --private-key <file>   Path to private key file (.pem) for the GitHub App
        #   -L, --log-level <level>    One of: "trace" | "debug" | "info" | "warn" | "error" | "fatal" (default: "info")
        #   --log-format <format>      One of: "pretty", "json"
        #   --log-level-in-string      Set to log levels (trace, debug, info, ...) as words instead of numbers (10, 20, 30, ...) (default: false)
        #   --sentry-dsn <dsn>         Set to your Sentry DSN, e.g. "https://1234abcd@sentry.io/12345"
        #   --redis-url <url>          Set to a "redis://" url in order to enable cluster support for request throttling. Example: "redis://:secret@redis-123.redislabs.com:12345/0"
        #   --base-url <url>           GitHub API base URL. If you use GitHub Enterprise Server, and your hostname is "https://github.acme-inc.com", then the root URL is "https://github.acme-inc.com/api/v3" (default:
        #                              "https://api.github.com")
        #   -h, --help                 display help for command

        # Usage: probot-receive [options] [path/to/app.js...]

        # Options:
        #   -e, --event <event-name>           Event name
        #   -p, --payload-path <payload-path>  Path to the event payload
        #   -t, --token <access-token>         Access token
        #   -a, --app <id>                     ID of the GitHub App
        #   -P, --private-key <file>           Path to private key file (.pem) for the GitHub App
        #   -L, --log-level <level>            One of: "trace" | "debug" | "info" | "warn" | "error" | "fatal"
        #   --log-format <format>              One of: "pretty", "json" (default: "pretty")
        #   --log-level-in-string              Set to log levels (trace, debug, info, ...) as words instead of numbers (10, 20, 30, ...) (default: false)
        #   --log-message-key                  Set to the string key for the 'message' in the log JSON object
        #   --sentry-dsn <dsn>                 Set to your Sentry DSN, e.g. "https://1234abcd@sentry.io/12345"
        #   --base-url <url>                   GitHub API base URL. If you use GitHub Enterprise Server, and your hostname is "https://github.acme-inc.com", then the root URL is "https://github.acme-inc.com/api/v3" (default:
        #                                      "https://api.github.com")
        #   -h, --help                         display help for command
