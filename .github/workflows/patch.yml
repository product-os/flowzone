# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
name: Patch

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: JSON array of repositories
        required: true
        type: string
        default: >
          []
      patches_base64:
        description: One or more patches encoded to base64
        required: true
        type: string
      pr_branch:
        description: Branch name for the pull request
        required: true
        type: string
        default: user/bulk-patch
      pr_title:
        description: The title for the pull request
        required: true
        type: string
      pr_body:
        description: The body for the pull request
        required: false
        type: string
      pr_labels:
        description: Comma-separated labels for the pull request
        required: false
        type: string
        default: bulk-patch
      pr_draft:
        description: Create draft pull request
        required: false
        type: boolean
        default: false
      dry_run:
        description: Patch files but do not push changes
        required: false
        type: boolean
        default: true
      token_app_id:
        description: GitHub App id to request a temporary token
        type: string
        required: false
        # https://github.com/organizations/product-os/settings/apps/flowzone-app
        default: "291899"
      token_installation_id:
        description: GitHub App installation id to request a temporary token
        type: string
        required: false
        default: ""

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  process_inputs:
    name: Process inputs
    runs-on: ubuntu-latest
    timeout-minutes: 20

    outputs:
      matrix: ${{ steps.matrix.outputs.build }}

    steps:
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}" || true

      - name: Create repositories matrix
        id: matrix
        env:
          REPOS: ${{ inputs.repositories }}
          # https://github.com/organizations/product-os/settings/installations
          # https://github.com/organizations/balena-os/settings/installations
          # https://github.com/organizations/balena-io/settings/installations
          # https://github.com/organizations/balena-io-modules/settings/installations
          KNOWN_INSTALLATION_IDS: >
            {
              "balena-io-modules": 34046903,
              "balena-io": 34046749,
              "balena-os": 34046907,
              "company-os": 36586391,
              "product-os": 34040165
            }
        run: |
          echo "build=$(jq -cr --argjson installation_ids "${KNOWN_INSTALLATION_IDS}" '{
            include: map({
                repository: .,
                installation_id: $installation_ids[split("/")[0]] | tostring
            })
          }' <<< "${REPOS}")" >> $GITHUB_OUTPUT

  patch_repo:
    name: Patch repository
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: process_inputs

    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}

    strategy:
      fail-fast: false
      matrix:
        repository: ${{ fromJSON(needs.process_inputs.outputs.repositories) }}

    env:
      # https://cli.github.com/manual/gh_help_environment
      GH_REPO: ${{ matrix.repository }}
      GH_PROMPT_DISABLED: "true"
      GH_DEBUG: "true"
      GH_PAGER: "cat"

    steps:
      # https://github.com/tibdex/github-app-token
      - name: Generate GitHub App token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: gh_token
        with:
          app_id: ${{ inputs.token_app_id }}
          installation_retrieval_mode: id
          installation_retrieval_payload: ${{ inputs.token_installation_id || matrix.installation_id }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          repositories: ${{ matrix.repository }}
          permissions: >-
            {
              "contents": "write",
              "metadata": "read",
              "pull_requests": "write"
            }

      # https://cli.github.com/manual/gh_api
      - name: Get repository settings
        id: repo
        env:
          GH_TOKEN: ${{ steps.gh_token.outputs.token }}
        run: |
          echo "default_branch=$(gh api repos/{owner}/{repo} --jq '.default_branch')" >> $GITHUB_OUTPUT

      # https://github.com/actions/checkout
      - name: Checkout base branch
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          repository: ${{ matrix.repository }}
          token: ${{ steps.gh_token.outputs.token }}
          ref: ${{ steps.repo.outputs.default_branch }}

      # https://github.com/crazy-max/ghaction-import-gpg
      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # https://git-scm.com/docs/git-am
      - name: Apply patches
        env:
          PATCHES_B64: ${{ inputs.patches_base64 }}
        run: |
          echo "${{ env.PATCHES_B64 }}" | base64 -d | git am | awk 'BEGIN{print "```"}; {print}; END{print "```"}' | tee -a $GITHUB_STEP_SUMMARY || 
            { git am --show-current-patch=diff | awk 'BEGIN{print "```"}; {print}; END{print "```"}' | tee -a $GITHUB_STEP_SUMMARY ; exit 1 ; }

      # https://github.com/peter-evans/create-pull-request
      - name: Create pull request
        uses: peter-evans/create-pull-request@b1ddad2c994a25fbc81a28b3ec0e368bb2021c50 # v6.0.0
        if: inputs.dry_run != true
        id: cpr
        with:
          token: ${{ steps.gh_token.outputs.token }}
          branch: ${{ inputs.pr_branch }}
          title: ${{ inputs.pr_title }}
          body: |
            ${{ inputs.pr_body}}
          labels: |
            ${{ inputs.pr_labels }}
          draft: ${{ inputs.pr_draft}}
          delete-branch: true

      - name: Update summary
        if: steps.cpr.outputs.pull-request-number != ''
        run: |
          echo "Pull Request Number: ${{ steps.cpr.outputs.pull-request-number }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Pull Request URL: ${{ steps.cpr.outputs.pull-request-url }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Pull Request Operation: ${{ steps.cpr.outputs.pull-request-operation }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Pull Request Head SHA: ${{ steps.cpr.outputs.pull-request-head-sha }}" | tee -a $GITHUB_STEP_SUMMARY

      # - name: Enable auto-merge
      #   if: steps.cpr.outputs.pull-request-number != ''
      #   env:
      #     GH_TOKEN: ${{ steps.gh_token.outputs.token }}
      #   run: |
      #     gh pr merge ${{ steps.cpr.outputs.pull-request-number }} --merge --auto || true
