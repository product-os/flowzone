# DO NOT EDIT MANUALLY - This file is auto-generated from `/flowzone.yml`
name: Flowzone
on:
  workflow_call:
    secrets:
      FLOWZONE_TOKEN:
        description: Personal access token (PAT) for the GitHub service account with admin/owner permissions
        required: true
      GPG_PRIVATE_KEY:
        description: GPG private key exported with `gpg --armor --export-secret-keys ...` to sign commits
        required: false
      GPG_PASSPHRASE:
        description: Passphrase to decrypt GPG private key
        required: false
      NPM_TOKEN:
        description: The npm auth token to use for publishing
        required: false
      GHCR_TOKEN:
        description: A personal access token to publish to the GitHub Container Registry, will use FLOWZONE_TOKEN if unset
        required: false
      DOCKERHUB_USER:
        description: Username to publish to the Docker Hub container registry
        required: false
      DOCKER_REGISTRY_USER:
        description: Deprecated, use DOCKERHUB_USER instead
        required: false
      DOCKERHUB_TOKEN:
        description: A personal access token to publish to the Docker Hub container registry
        required: false
      DOCKER_REGISTRY_PASS:
        description: Deprecated, use DOCKERHUB_TOKEN instead
        required: false
      BALENA_API_KEY:
        description: API key for pushing releases to balena applications
        required: false
      BALENA_API_KEY_PUSH:
        description: Deprecated, use BALENA_API_KEY instead
        required: false
      CARGO_REGISTRY_TOKEN:
        description: A personal access token to publish to a cargo registry
        required: false
      COMPOSE_VARS:
        description: Optional base64 encoded docker-compose `.env` file for testing Docker images
        required: false
      CF_ACCOUNT_ID:
        description: Cloudflare account ID
        required: false
      CF_API_TOKEN:
        description: Cloudflare API token with limited access for Pages projects
        required: false
      CUSTOM_JOB_SECRET_1:
        description: Optional secret for using with custom jobs
        required: false
      CUSTOM_JOB_SECRET_2:
        description: Optional secret for using with custom jobs
        required: false
      CUSTOM_JOB_SECRET_3:
        description: Optional secret for using with custom jobs
        required: false
    inputs:
      runs_on:
        description: GitHub Actions runner type.
        type: string
        required: false
        default: '["ubuntu-22.04"]'
      jobs_timeout_minutes:
        description: Timeout for the job(s).
        type: number
        required: false
        default: 360
      working_directory:
        description: GitHub actions working directory
        type: string
        required: false
        default: .
      docker_images:
        description: Comma-delimited string of Docker images (without tags) to publish (skipped if empty)
        type: string
        required: false
        default: ""
      bake_targets:
        description: Comma-delimited string of Docker buildx bake targets to publish (skipped if empty)
        type: string
        required: false
        default: default
      balena_environment:
        description: balenaCloud environment
        type: string
        required: false
        default: balena-cloud.com
      balena_slugs:
        description: Comma-delimited string of balenaCloud apps, fleets, or blocks to deploy (skipped if empty)
        type: string
        required: false
        default: ""
      cargo_targets:
        description: Comma-delimited string of Rust stable targets to publish (skipped if empty)
        type: string
        required: false
        default: aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, arm-unknown-linux-gnueabihf, x86_64-unknown-linux-gnu, i686-unknown-linux-gnu
      rust_binaries:
        description: Set to true to publish Rust binary release artifacts to GitHub
        type: boolean
        required: false
        default: false
      protect_branch:
        description: Set to false to disable updating branch protection rules after a successful run
        type: boolean
        required: false
        default: true
      repo_config:
        description: Set to true to standardise repository settings after a successful run
        type: boolean
        required: false
        default: false
      repo_allow_forking:
        description: Allow forking of an organization repository
        type: boolean
        required: false
        default: true
      repo_default_branch:
        description: Set the default branch name for the repository
        type: string
        required: false
        default: master
      repo_delete_branch_on_merge:
        description: Delete head branch when pull requests are merged
        type: boolean
        required: false
        default: true
      repo_allow_update_branch:
        description: Always suggest updating pull request branches
        type: boolean
        required: false
        default: true
      repo_description:
        description: Description of the repository
        type: string
        required: false
        default: ""
      repo_homepage:
        description: Repository home page URL
        type: string
        required: false
        default: ""
      repo_enable_auto_merge:
        description: Enable auto-merge functionality
        type: boolean
        required: false
        default: true
      repo_enable_issues:
        description: Enable issues in the repository
        type: boolean
        required: false
        default: true
      repo_enable_merge_commit:
        description: Enable merging pull requests via merge commit
        type: boolean
        required: false
        default: true
      repo_enable_projects:
        description: Enable projects in the repository
        type: boolean
        required: false
        default: false
      repo_enable_rebase_merge:
        description: Enable merging pull requests via rebase
        type: boolean
        required: false
        default: false
      repo_enable_squash_merge:
        description: Enable merging pull requests via squashed commit
        type: boolean
        required: false
        default: false
      repo_enable_wiki:
        description: Enable wiki in the repository
        type: boolean
        required: false
        default: false
      repo_visibility:
        description: Change the visibility of the repository to {public,private,internal}
        type: string
        required: false
        default: default
      disable_versioning:
        description: Set to true to disable automatic versioning
        type: boolean
        required: false
        default: false
      required_approving_review_count:
        description: Setting this value to zero effectively means merge==deploy without approval(s)
        type: string
        required: false
        default: "1"
      job_name:
        description: The name of the job, necessary for branch protection if not using the default of 'Flowzone'
        type: string
        required: false
        default: Flowzone
      checkout_fetch_depth:
        description: Configures the depth of the actions/checkout git fetch.
        type: number
        required: false
        default: 1
      tests_run_on:
        description: GitHub Actions runner type for custom jobs.
        type: string
        required: false
        default: '["ubuntu-22.04"]'
      cloudflare_website:
        description: Setting this to your existing CF pages project name will generate and deploy a website. Skipped if empty.
        type: string
        required: false
        default: ""
      docusaurus_website:
        description: Set to false to disable building a docusaurus website. If false the script `npm run deploy-docs` will be run if it exists.
        type: boolean
        required: false
        default: true
      github_prerelease:
        description: Finalise releases on merge.
        type: boolean
        required: false
        default: false
      restrict_custom_actions:
        description: Do not execute custom actions for external contributors. Only remove this restriction if custom actions have been vetted as secure.
        type: boolean
        required: false
        default: true
      custom_test_matrix:
        description: Comma-delimited string of values that will be passed to the custom test action
        type: string
        required: false
        default: ""
      custom_publish_matrix:
        description: Comma-delimited string of values that will be passed to the custom publish action
        type: string
        required: false
        default: ""
      custom_finalize_matrix:
        description: Comma-delimited string of values that will be passed to the custom finalize action
        type: string
        required: false
        default: ""
concurrency:
  group: flowzone-${{ github.ref }}
  cancel-in-progress: true
env:
  GHCR_USER: flowzone
  NPM_REGISTRY: registry.npmjs.org
  CARGO_REGISTRY: crates.io
jobs:
  event_types:
    name: Event types
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    if: |
      (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && inputs.disable_versioning == true)
    outputs:
      pr: ${{ steps.pr.outcome == 'success' }}
      pr_opened: ${{ steps.pr_opened.outcome == 'success' }}
      pr_synchronize: ${{ steps.pr_synchronize.outcome == 'success' }}
      pr_merged: ${{ steps.pr_merged.outcome == 'success' }}
      pr_closed: ${{ steps.pr_closed.outcome == 'success' }}
      tagged: ${{ steps.tagged.outcome == 'success' }}
      do_draft: ${{ steps.pr_opened.outcome == 'success' || steps.pr_synchronize.outcome == 'success' }}
      do_final: ${{ steps.pr_merged.outcome == 'success' || steps.tagged.outcome == 'success' }}
      do_clean: ${{ steps.pr_closed.outcome == 'success' }}
    defaults:
      run:
        working-directory: .
        shell: bash
    env:
      JSON: ${{ toJSON(github) }}
    steps:
      - name: Pull Request
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        id: pr
        run: |
          echo "${JSON}" || true
      - name: Pull Request opened
        if: steps.pr.outcome == 'success' && github.event.action == 'opened'
        id: pr_opened
        run: |
          echo "${JSON}" || true
      - name: Pull Request synchronize
        if: steps.pr.outcome == 'success' && github.event.action == 'synchronize'
        id: pr_synchronize
        run: |
          echo "${JSON}" || true
      - name: Pull Request merged
        if: steps.pr.outcome == 'success' && github.event.pull_request.merged == true
        id: pr_merged
        run: |
          echo "${JSON}" || true
      - name: Pull Request closed
        if: steps.pr.outcome == 'success' && github.event.action == 'closed'
        id: pr_closed
        run: |
          echo "${JSON}" || true
      - name: Tag event
        if: github.event_name == 'push'
        id: tagged
        run: |
          echo "${JSON}" || true
  project_types:
    name: Project types
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      balena_slugs: ${{ steps.balena_slugs.outputs.build }}
      docker_images: ${{ steps.docker_images.outputs.build }}
      bake_targets: ${{ steps.bake_targets.outputs.build }}
      cargo_targets: ${{ steps.cargo_targets.outputs.build }}
      npm: ${{ steps.npm.outputs.enabled }}
      npm_private: ${{ steps.npm.outputs.private }}
      npm_docs: ${{ steps.npm.outputs.docs }}
      docker_compose: ${{ steps.docker_compose.outputs.file }}
      docker_compose_test: ${{ steps.docker_compose_test.outputs.file }}
      docker_bake: ${{ steps.docker_bake.outputs.build }}
      balena: ${{ steps.balena.outputs.enabled }}
      node_versions: ${{ steps.node_versions.outputs.json }}
      python_poetry: ${{ steps.python_poetry.outputs.enabled }}
      python_versions: ${{ steps.python_versions.outputs.json }}
      cargo: ${{ steps.cargo.outputs.enabled }}
      has_readme: ${{ steps.has_readme.outputs.enabled }}
      custom_test: ${{ steps.custom.outputs.test }}
      custom_test_matrix: ${{ steps.custom_test_matrix.outputs.build }}
      custom_publish: ${{ steps.custom.outputs.publish }}
      custom_publish_matrix: ${{ steps.custom_publish_matrix.outputs.build }}
      custom_finalize: ${{ steps.custom.outputs.finalize }}
      custom_finalize_matrix: ${{ steps.custom_finalize_matrix.outputs.build }}
      custom_clean: ${{ steps.custom.outputs.clean }}
      custom_always: ${{ steps.custom.outputs.always }}
    steps:
      - name: Checkout merge branch
        if: github.event_name == 'pull_request_target' && needs.event_types.outputs.pr_closed != true
        id: checkout_merge
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.FLOWZONE_TOKEN }}
          ref: refs/pull/${{ github.event.number }}/merge
      - name: Checkout sha
        if: steps.checkout_merge.outcome == 'skipped'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.FLOWZONE_TOKEN }}
      - name: Convert balena_slugs to a JSON array
        id: balena_slugs
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.balena_slugs }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
      - name: Convert docker_images to a JSON array
        id: docker_images
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.docker_images }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
      - name: Convert bake_targets to a JSON array
        id: bake_targets
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.bake_targets }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
      - name: Convert cargo_targets to a JSON array
        id: cargo_targets
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.cargo_targets }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
      - name: Check external contributor limitations
        if: github.event.pull_request.head.repo.full_name != github.repository
        env:
          GH_TOKEN: ${{ secrets.FLOWZONE_TOKEN }}
        run: |
          if [ -n "${{ secrets.COMPOSE_VARS }}" ]
          then
            echo "::notice::COMPOSE_VARS secrets are not currently supported for external contributions. \
              Please contact a member of the organization for assistance."
            exit 1
          fi

          if [[ $(gh pr diff ${{ github.event.pull_request.number }} --name-only) =~ ^\.github\/ ]]
          then
            echo "::notice::Modifications to workflow files are not supported for external contributions. \
              Please contact a member of the organization for assistance."
            exit 1
          fi

          if [ "${{ inputs.restrict_custom_actions }}" == "true" ]
          then
            echo "::notice::Custom actions are disabled for external contributors and will be skipped. \
              Please contact a member of the organization for assistance."
            exit 0
          fi
      - name: Check for package.json
        id: npm
        run: |
          if test -f "package.json"
          then
            echo "found package.json"
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "private=$(jq -r '.private' package.json)" >> $GITHUB_OUTPUT
            echo "docs=$(jq -r '.scripts | has("doc")' package.json)" >> $GITHUB_OUTPUT
            echo "NODE_VERSIONS=[]" >> $GITHUB_ENV
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup Node.js 12.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: 12.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["12.x"]')" >> $GITHUB_ENV
          fi
      - name: Setup Node.js 14.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: 14.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["14.x"]')" >> $GITHUB_ENV
          fi
      - name: Setup Node.js 16.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: 16.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["16.x"]')" >> $GITHUB_ENV
          fi
      - name: Setup Node.js 18.x
        if: steps.npm.outputs.enabled == 'true'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: 18.x
      - name: Check engine
        if: steps.npm.outputs.enabled == 'true'
        run: |
          if npx -q -y -- check-engine
          then
            echo "NODE_VERSIONS=$(echo "${NODE_VERSIONS}" | jq -c '. + ["18.x"]')" >> $GITHUB_ENV
          fi
      - name: Set Node.js versions
        if: steps.npm.outputs.enabled == 'true'
        id: node_versions
        run: |
          echo "json=[\"16.x\"]" >> $GITHUB_OUTPUT
          if [ "${NODE_VERSIONS}" != "[]" ]
          then
            echo "json=${NODE_VERSIONS}" >> $GITHUB_OUTPUT
          fi
      - name: Check for Docker compose files
        id: docker_compose
        run: |
          if [ -f docker-compose.yml ]
          then
            echo "file=docker-compose.yml" >> $GITHUB_OUTPUT
          elif [ -f docker-compose.yaml ]
          then
            echo "file=docker-compose.yaml" >> $GITHUB_OUTPUT
          fi
      - name: Check for Docker compose test files
        id: docker_compose_test
        run: |
          if [ -f docker-compose.test.yml ]
          then
            echo "file=docker-compose.test.yml" >> $GITHUB_OUTPUT
          elif [ -f docker-compose.test.yaml ]
          then
            echo "file=docker-compose.test.yaml" >> $GITHUB_OUTPUT
          fi
      - name: Check for Docker bake files
        id: docker_bake
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        with:
          cmd: bash -c "find ${{ github.workspace }}/${{ inputs.working_directory }} -maxdepth 1 -name 'docker-bake*'" || true
          separator: newline
      - name: Check for balena.yml
        id: balena
        run: |
          if test -f balena.yml
          then
            echo "found balena.yml"
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for Python Poetry pyproject.toml
        id: python_poetry
        run: |
          if test -f "pyproject.toml"
          then
            echo "found pyproject.toml"
            if grep 'build-backend.*poetry' pyproject.toml
            then
              echo "Poetry used"
              echo "enabled=true" >> $GITHUB_OUTPUT
              echo "PYTHON_VERSIONS=[]" >> $GITHUB_ENV
            else
              echo "Poetry not used"
              echo "enabled=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Install Poetry
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          pipx install poetry
      - name: Set up Python 3.7
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: "3.7"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.7 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.7"]')" >> $GITHUB_ENV
          else
            echo "Python 3.7 does not meet project requirements."
          fi
      - name: Set up Python 3.8
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: "3.8"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.8 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.8"]')" >> $GITHUB_ENV
          else
            echo "Python 3.8 does not meet project requirements."
          fi
      - name: Set up Python 3.9
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: "3.9"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.9 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.9"]')" >> $GITHUB_ENV
          else
            echo "Python 3.9 does not meet project requirements."
          fi
      - name: Set up Python 3.10
        if: steps.python_poetry.outputs.enabled == 'true'
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: "3.10"
      - name: Check compatibility
        if: steps.python_poetry.outputs.enabled == 'true'
        run: |
          error_check=`(poetry env use 3.10 2>&1 || true)`
          if ! grep -q "Please choose a compatible version" <<< $error_check
          then
            echo "PYTHON_VERSIONS=$(echo "${PYTHON_VERSIONS}" | jq -c '. + ["3.10"]')" >> $GITHUB_ENV
          else
            echo "Python 3.10 does not meet project requirements."
          fi
      - name: Set Python versions
        if: steps.python_poetry.outputs.enabled == 'true'
        id: python_versions
        run: |
          echo "json=[\"\^3.7\"]" >> $GITHUB_OUTPUT
          if [ "${PYTHON_VERSIONS}" != "[]" ]
          then
            echo "json=${PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
          fi
      - name: Check Cargo.toml
        id: cargo
        run: |
          if test -f "Cargo.toml"
          then
            echo "found Cargo.toml"
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for README for building a website
        id: has_readme
        run: |
          if test -e "README.md"
          then
            echo "found README.md"
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      - name: Check for custom actions
        if: github.event.pull_request.head.repo.full_name == github.repository || inputs.restrict_custom_actions == false
        id: custom
        working-directory: .
        run: |
          if [ -d .github/actions/test ]
          then
            echo "test=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/publish ]
          then
            echo "publish=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/finalize ]
          then
            echo "finalize=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/clean ]
          then
            echo "clean=true" >> $GITHUB_OUTPUT
          fi
          if [ -d .github/actions/always ]
          then
            echo "always=true" >> $GITHUB_OUTPUT
          fi
      - name: Convert custom_test_matrix to a JSON array
        id: custom_test_matrix
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.custom_test_matrix }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
      - name: Convert custom_publish_matrix to a JSON array
        id: custom_publish_matrix
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.custom_publish_matrix }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
      - name: Convert custom_finalize_matrix to a JSON array
        id: custom_finalize_matrix
        uses: kanga333/json-array-builder@c7cd9d3a8b17cd368e9c2210bc3c16b0e2714ce5
        env:
          INPUT: ${{ inputs.custom_finalize_matrix }}
        with:
          cmd: bash -c "echo $INPUT | tr -d '[:space:]'"
          separator: ","
  versioned_source:
    name: Versioned source
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    outputs:
      new_tag: ${{ steps.new_version.outputs.tag || steps.git_describe.outputs.tag }}
      version: ${{ steps.new_version.outputs.semver }}
    steps:
      - name: Checkout merge branch
        if: github.event_name == 'pull_request_target' && needs.event_types.outputs.pr_closed != true
        id: checkout_merge
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.FLOWZONE_TOKEN }}
          ref: refs/pull/${{ github.event.number }}/merge
      - name: Checkout sha
        if: steps.checkout_merge.outcome == 'skipped'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.FLOWZONE_TOKEN }}
      - name: Reject merge commits
        run: |
          if [ "$(git cat-file -p ${{ github.event.pull_request.head.sha || github.event.head_commit.id }} | grep '^parent ' | wc -l)" -gt 1 ]
          then
            echo "::error::Latest commit appears to be a merge, which is currently unsupported. Try a rebase instead."
            exit 1
          fi
      - name: Import GPG key for signing commits
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr == 'true'
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@3774d0e7f5ff2ea7cf9f20a4f7cfe2d01559571a
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Install versionist
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr == 'true'
        run: |
          npm install -g balena-versionist@0.14.12 versionist@6.9.2
      - name: Generate changelog
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr == 'true'
        run: |
          if [ ! -f .versionbot/CHANGELOG.yml ]
          then
            (cd ${{ runner.temp }}

            wget https://github.com/mikefarah/yq/releases/download/3.0.1/yq_linux_amd64 -O yq
            echo "a1097c74b81a2ef255583d9718bf4be6  yq" | md5sum -c -
            chmod +x yq

            PATH="${PWD}:${PATH}" GH_TOKEN=${{ secrets.FLOWZONE_TOKEN }} $(npm root -g)/versionist/scripts/generate-changelog.sh "${GITHUB_WORKSPACE}"
            )
          fi
      - name: Get latest tag for current branch
        continue-on-error: true
        id: old_version
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr == 'true'
        run: |
          tag="$(git tag --list --sort=-version:refname "v*.*.*" --merged | head -n1)"
          echo "semver=${tag/v/}" >> $GITHUB_OUTPUT
          echo "tag=${tag}" >> $GITHUB_OUTPUT
      - name: Run versionist
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr == 'true'
        run: |
          balena-versionist
      - name: Git describe
        id: git_describe
        run: echo "tag=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT
      - name: Inspect versioned files
        id: new_version
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr == 'true'
        run: |
          git status --porcelain
          versions=()
          [ -f .versionbot/CHANGELOG.yml ] && versions+=($(yq e '.[0].version' .versionbot/CHANGELOG.yml))
          semver="${versions[0]}"
          if [ -z "${semver}" ] || [ "${semver}" = "${{ steps.old_version.outputs.semver }}" ]
          then
            echo "::error::Failed to detect any versioned files! Did you include a Change-type?"
            exit 1
          fi

          echo "semver=${semver}" >> $GITHUB_OUTPUT
          echo "tag=v${semver}" >> $GITHUB_OUTPUT
      - name: Create versioned commit
        if: inputs.disable_versioning != true
        env:
          GIT_AUTHOR_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import-gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import-gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import-gpg.outputs.email }}
          TAG: ${{ steps.new_version.outputs.tag }}
        run: |
          git add --all
          git commit -m "${TAG}"
          git tag -a "${TAG}" -m "${TAG}" -f
          git show -1
          git log -n 2
      - name: Push versioned commit
        if: inputs.disable_versioning != true && needs.event_types.outputs.pr_merged == 'true'
        run: |
          git push origin HEAD:${{ github.base_ref }}
          # We push the tag separately so that it is only pushed if the commit push succeed, this avoids
          # issues if something else updates the main branch whilst we're running and causes us to push
          # the tag successfully but not the main branch and breaks future versioning attempts
          git push origin "refs/tags/${{ steps.new_version.outputs.tag }}"
      - name: Compress source
        run: tar -acvf ${{ runner.temp }}/source.tgz .
      - name: Upload artifact
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}/source.tgz
          retention-days: 1
  npm_test:
    name: Test npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.npm == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        node_version: ${{ fromJSON(needs.project_types.outputs.node_versions) }}
    outputs:
      package: ${{ steps.meta.outputs.package }}
      version: ${{ steps.meta.outputs.version }}
      branch_tag: ${{ steps.meta.outputs.branch_tag }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
      version_tag: ${{ steps.meta.outputs.version_tag }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Setup Node.js
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: ${{ matrix.node_version }}
      - name: Generate metadata
        id: meta
        run: |
          package="$(jq -r '.name' package.json)"
          version="$(jq -r '.version' package.json)"
          branch_tag="$(echo 'build-${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "package=${package}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "branch_tag=${branch_tag}" >> $GITHUB_OUTPUT
          echo "sha_tag=${sha_tag}" >> $GITHUB_OUTPUT
          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
      - name: Login to registry for private dependencies
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo '//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
            npm whoami
          fi
      - name: Install native dependencies (if necessary)
        run: |
          npm run flowzone-preinstall --if-present
      - name: Install dependencies
        run: |
          runner_os="$(echo "${RUNNER_OS}" | tr '[:upper:]' '[:lower:]')"
          os_count="$(jq '.os | length' package.json)"
          index="$(jq --arg os "${runner_os}" '.os | index($os) | select( . != null )' package.json)"
          if [[ -n "$index" ]] || [[ "$os_count" -lt 1 ]]; then
              if [ -e package-lock.json ] || [ -e npm-shrinkwrap.json ]; then
                npm ci
              else
                npm i
              fi
          else
              echo "${runner_os} is not supported in package.json"
          fi
      - name: Run build
        run: npm run build --if-present
      - name: Run tests
        run: npm test
      - name: Run pack
        run: |
          mkdir ${{ runner.temp }}/npm-pack && npm pack --pack-destination=${{ runner.temp }}/npm-pack

          # FIXME: workaround when `npm pack` for npm 6.x dumps tarball into the current directory because it has no `--pack-destination` flag
          [[ "$(npm --version)" =~ ^6\..* ]] && find . -maxdepth 1 -name '*.tgz' -exec mv {} ${{ runner.temp }}/npm-pack \; || true
      - name: Upload artifact
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: npm-${{ github.event.pull_request.head.sha }}-${{ matrix.node_version }}
          path: ${{ runner.temp }}/npm-pack/*.tgz
          retention-days: 90
      - name: Generate docs (if present)
        if: needs.project_types.outputs.npm_docs == 'true'
        shell: bash
        run: npm run doc
      - name: Compress docs
        if: needs.project_types.outputs.npm_docs == 'true'
        run: tar -acvf ${{ runner.temp }}/docs.tgz ./docs
      - name: Upload artifact
        if: needs.project_types.outputs.npm_docs == 'true'
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: docs-${{ github.event.pull_request.head.sha }}-${{ matrix.node_version }}
          path: ${{ runner.temp }}/docs.tgz
          retention-days: 90
  npm_publish:
    name: Publish npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - project_types
      - versioned_source
      - npm_test
      - custom_test
    if: |
      !failure() && !cancelled() &&
      needs.npm_test.result == 'success' &&
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.npm_private != 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          path: ${{ runner.temp }}
      - name: Login to registry
        run: |
          echo '//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
          npm whoami
      - name: Publish draft release
        run: |
          pack="$(ls ${{ runner.temp }}/npm-*/*.tgz | sort -t- -n -k3 | tail -n1)"
          tar xvf "${pack}"
          (cd package
          npm --loglevel=verbose --logs-max=0 --no-git-tag-version version ${{ needs.npm_test.outputs.version_tag }}-${{ github.run_attempt }} --allow-same-version
          )
          tar czvf "${pack}" package

          if [ ${{ github.run_attempt }} -gt  1 ]; then
            npm --loglevel=verbose --logs-max=0 unpublish ${{ needs.npm_test.outputs.package }}@${{ needs.npm_test.outputs.version_tag }}-$((${{ github.run_attempt }} - 1)) || true
          fi
          npm --loglevel=verbose --logs-max=0 publish --tag=${{ needs.npm_test.outputs.sha_tag }} "${pack}"
          npm --loglevel=verbose --logs-max=0 dist-tag add ${{ needs.npm_test.outputs.package }}@${{ needs.npm_test.outputs.version_tag }}-${{ github.run_attempt }} ${{ needs.npm_test.outputs.branch_tag }}
  npm_finalize:
    name: Finalize npm
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      needs.project_types.outputs.npm == 'true' &&
      needs.project_types.outputs.npm_private != 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download artifacts from PR
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.FLOWZONE_TOKEN }}
          commit: ${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
          workflow_conclusion: success
      - name: Login to registry
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo '//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
            npm whoami
          fi
      - name: Publish final release
        run: |
          pack="$(ls ${{ runner.temp }}/npm-*/*.tgz | sort -t- -n -k3 | tail -n1)"
          npm --loglevel=verbose --logs-max=0 publish --tag "latest" "${pack}"
  npm_docs_finalize:
    name: Finalize npm docs
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      needs.project_types.outputs.npm_docs == 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download artifacts from PR
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.FLOWZONE_TOKEN }}
          commit: ${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
          workflow_conclusion: success
      - name: Extract docs artifact
        run: |
          docs="$(ls ${{ runner.temp }}/docs-*/*.tgz | sort -t- -n -k3 | tail -n1)"
          tar -xvf "${docs}"
      - name: Publish generated docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@de7ea6f8efb354206b205ef54722213d99067935
        with:
          github_token: ${{ secrets.FLOWZONE_TOKEN }}
          publish_dir: docs
          publish_branch: docs
  docker_test:
    name: Test docker
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - project_types
      - versioned_source
    if: |
      !failure() && !cancelled() &&
      needs.event_types.outputs.do_draft == 'true' &&
      (join(fromJSON(needs.project_types.outputs.docker_images)) != '' || needs.project_types.outputs.docker_compose_test != '')
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.project_types.outputs.bake_targets) }}
    env:
      BAKE_OVERRIDE: /tmp/docker-bake.override.json
      BAKE_EMPTY: /tmp/docker-bake.empty.json
      SUT_IMAGE: localhost:5000/sut
    services:
      registry:
        image: registry:2.8.1
        ports:
          - 5000:5000
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Setup QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      - name: Setup buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325
        with:
          driver-opts: network=host
          install: true
      - name: Set env vars
        run: |
          DOCKER_IMAGES="$(echo "${{ join(fromJSON(needs.project_types.outputs.docker_images),' ') }}" | tr " " "\n")"
          echo "DOCKER_IMAGES<<EOF" >> $GITHUB_ENV
          echo "${DOCKER_IMAGES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          if [ ${{ matrix.target }} != 'default' ]
          then
            echo "PREFIX=${{ matrix.target }}-" >> $GITHUB_ENV
          fi

          if [ -f "${{ needs.project_types.outputs.docker_compose }}" ]
          then
            echo "COMPOSE_FILE=${{ needs.project_types.outputs.docker_compose }}:${{ needs.project_types.outputs.docker_compose_test }}" >> $GITHUB_ENV
          else
            echo "COMPOSE_FILE=${{ needs.project_types.outputs.docker_compose_test }}" >> $GITHUB_ENV
          fi
      - name: Generate draft labels and tags
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: |
            ${{ env.DOCKER_IMAGES || env.SUT_IMAGE }}
          tags: |
            type=raw,value=${{ github.event.pull_request.head.sha }}
            type=raw,value=build-${{ github.event.pull_request.head.ref }}
          labels: org.opencontainers.image.version=${{ needs.versioned_source.outputs.new_tag }}
          flavor: |
            latest=false
            prefix=${{ env.PREFIX }}
      - name: Create bake override
        run: |
          jq -n '{target:{"${{ matrix.target }}":{}}}' > ${BAKE_EMPTY}
          docker buildx bake --print ${{ matrix.target }} \
            -f ${{ join(fromJSON(needs.project_types.outputs.docker_bake),' -f ') || env.BAKE_EMPTY }} \
            | jq '.target |= map_values(."inherits" += ["docker-metadata-action"])' \
            | jq '.target |= map_values(."cache-to" //= ["type=gha"])' \
            | jq '.target |= map_values(."cache-from" //= ["type=gha"])' \
            > "${BAKE_OVERRIDE}"
          jq . "${BAKE_OVERRIDE}"
      - name: Docker bake and push to local registry
        uses: docker/bake-action@6c87dcca988e4e074e3ab1f976a70f63ec9673fb
        with:
          workdir: ${{ inputs.working_directory }}
          files: |
            ${{ env.BAKE_OVERRIDE }}
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ matrix.target }}
          set: |
            *.tags=${{ env.SUT_IMAGE }}:${{ env.PREFIX }}latest
          load: false
          push: true
      - name: Run docker compose tests
        id: compose_test
        if: needs.project_types.outputs.docker_compose_test != ''
        env:
          COMPOSE_VARS: ${{ secrets.COMPOSE_VARS }}
          DOCKER_BUILDKIT: "1"
        run: |
          if [ -n "${COMPOSE_VARS}" ]
          then
            echo "${COMPOSE_VARS}" | base64 --decode > .env

            # mask secrets
            while read -r line; do
              secret="$(echo "${line}" | awk -F'=' '{print $2}')"
              echo "::add-mask::${secret}"
            done <<< "$(cat < .env)"
          fi

          docker compose up sut --exit-code-from sut || { docker compose logs ; exit 1 ; }
          docker compose logs
      - name: Warn if tests skipped
        if: join(fromJSON(needs.project_types.outputs.docker_images)) != '' && steps.compose_test.result == 'skipped'
        run: echo "::warning::Publishing Docker images without docker compose tests!"
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN || secrets.FLOWZONE_TOKEN }}
      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
      - name: Publish draft tags
        if: join(fromJSON(needs.project_types.outputs.docker_images)) != ''
        uses: akhilerm/tag-push-action@85bf542f43f5f2060ef76262a67ee3607cb6db37
        with:
          src: ${{ env.SUT_IMAGE }}:${{ env.PREFIX }}latest
          dst: |
            ${{ steps.meta.outputs.tags }}
  docker_finalize:
    name: Finalize docker
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      join(fromJSON(needs.project_types.outputs.docker_images)) != ''
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.project_types.outputs.docker_images) }}
        target: ${{ fromJSON(needs.project_types.outputs.bake_targets) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set env vars
        run: |
          if [ ${{ matrix.target }} != 'default' ]
          then
            echo "PREFIX=${{ matrix.target }}-" >> $GITHUB_ENV
          fi
      - name: Generate versioned labels and tags
        id: meta1
        if: needs.versioned_source.outputs.version != ''
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: |
            ${{ matrix.image }}
          tags: |
            type=raw,value=${{ github.base_ref || github.ref_name }}
            type=raw,value=${{ needs.versioned_source.outputs.new_tag }}
            type=raw,value=${{ needs.versioned_source.outputs.version }}
          flavor: |
            latest=true
            prefix=${{ env.PREFIX }},onlatest=true
      - name: Generate labels and tags
        id: meta2
        if: needs.versioned_source.outputs.version == ''
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: |
            ${{ matrix.image }}
          tags: |
            type=raw,value=${{ github.base_ref || github.ref_name }}
            type=ref,event=tag
            type=semver,pattern={{version}}
          flavor: |
            latest=auto
            prefix=${{ env.PREFIX }},onlatest=true
      - name: Login to GitHub Container Registry
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN || secrets.FLOWZONE_TOKEN }}
      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
      - name: Publish final tags
        uses: akhilerm/tag-push-action@85bf542f43f5f2060ef76262a67ee3607cb6db37
        with:
          src: ${{ matrix.image }}:${{ env.PREFIX }}${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          dst: |
            ${{ steps.meta1.outputs.tags }}
            ${{ steps.meta2.outputs.tags }}
      - name: Strip docker.io prefix
        if: (startsWith(matrix.image, 'docker.io') || !contains(matrix.image, '.'))
        id: dockerhub
        env:
          IMAGE: ${{ matrix.image }}
        run: |
          echo "repository=${IMAGE#*/}" >> $GITHUB_OUTPUT
      - name: Update DockerHub Description
        if: steps.dockerhub.outputs.repository != '' && github.base_ref == github.event.repository.default_branch
        continue-on-error: true
        uses: peter-evans/dockerhub-description@93b93397c27ed52b4055b8c6b2f8d92456ab3c56
        with:
          username: ${{ secrets.DOCKERHUB_USER || secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKER_REGISTRY_PASS }}
          repository: ${{ steps.dockerhub.outputs.repository }}
          readme-filepath: ./README.md
  balena_publish:
    name: Publish balena
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
      - npm_test
      - docker_test
      - custom_test
    if: |
      !failure() && !cancelled() &&
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.balena == 'true' &&
      join(fromJSON(needs.project_types.outputs.balena_slugs)) != ''
    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.project_types.outputs.balena_slugs) }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: balena-io/deploy-to-balena-action@master
        with:
          balena_token: ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}
          environment: ${{ inputs.balena_environment }}
          fleet: ${{ matrix.slug }}
          versionbot: false
          source: ${{ inputs.working_directory }}
  balena_finalize:
    name: Finalize balena
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      needs.project_types.outputs.balena == 'true' &&
      join(fromJSON(needs.project_types.outputs.balena_slugs)) != ''
    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJSON(needs.project_types.outputs.balena_slugs) }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: balena-io/deploy-to-balena-action@master
        with:
          balena_token: ${{ secrets.BALENA_API_KEY || secrets.BALENA_API_KEY_PUSH }}
          environment: ${{ inputs.balena_environment }}
          fleet: ${{ matrix.slug }}
          versionbot: false
          source: ${{ inputs.working_directory }}
  python_test:
    name: Test python poetry
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.python_poetry == 'true'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJSON(needs.project_types.outputs.python_versions) }}
    outputs:
      package: ${{ steps.meta.outputs.package }}
      version: ${{ steps.meta.outputs.version }}
      branch_tag: ${{ steps.meta.outputs.branch_tag }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
      version_tag: ${{ steps.meta.outputs.version_tag }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Run poetry install
        run: |
          poetry install
      - name: Add linters and pytest to poetry
        run: |
          dep_list=`poetry show`
          if (grep -wq ^flake8 <<< "$dep_list") && \
             (grep -wq ^pydocstyle <<< "$dep_list") && \
             (grep -wq ^pytest <<< "$dep_list")
          then
            echo "Dev dependencies already installed"
          else
            poetry add --group dev flake8@latest pydocstyle@latest pytest@latest
          fi
      - name: Lint with flake8
        run: |
          poetry run flake8 --max-line-length=120 --benchmark --extend-ignore=E203
      - name: Lint with pydocstyle
        run: |
          poetry run pydocstyle
      - name: Test with pytest
        run: |
          poetry run pytest tests/
      - name: Generate metadata
        id: meta
        run: |
          package="$(grep '^name = \"' pyproject.toml | awk -F[\"\"] '{print $2}')"
          version="${{ needs.versioned_source.outputs.version }}"
          branch_tag="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "package=${package}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "branch_tag=${branch_tag}" >> $GITHUB_OUTPUT
          echo "sha_tag=${sha_tag}" >> $GITHUB_OUTPUT
          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
  website_build:
    name: Build website using Docusaurus
    runs-on: ${{fromJSON(inputs.runs_on)}}
    env:
      CF_BRANCH: ${{ github.event.pull_request.head.ref || github.event.repository.default_branch }}
    needs:
      - project_types
      - versioned_source
      - event_types
    if: |
      inputs.cloudflare_website != ''
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: 18
      - name: Docusaurus Builder
        if: |
          needs.project_types.outputs.has_readme == 'true' &&
          inputs.docusaurus_website != false
        uses: product-os/docusaurus-theme@9cb615b78bcf2c2f9d8fa683a296a52d7beefae1
        with:
          repo: ${{ github.event.repository.name }}
          org: ${{ github.repository_owner }}
          default_branch: ${{ github.event.repository.default_branch }}
          url: https://${{ inputs.cloudflare_website }}.pages.dev/
      - name: Custom Website Builder
        if: |
          inputs.docusaurus_website == false
        run: npm run deploy-docs --if-present
      - name: Update deploy branch for merged PRs
        if: needs.event_types.outputs.pr_merged == 'true'
        run: |
          echo "CF_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
      - name: Cloudflare Pages
        uses: cloudflare/wrangler-action@4c10c1822abba527d820b29e6333e7f5dac2cabd
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages publish --branch ${{ env.CF_BRANCH }} --project-name=${{ inputs.cloudflare_website }} build/ >> $GITHUB_STEP_SUMMARY
  github_prepare:
    name: Clean previous GitHub draft release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - project_types
      - versioned_source
    if: |
      !failure() && !cancelled() &&
      needs.event_types.outputs.do_draft == 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Delete draft release
        run: gh release delete --yes '${{ github.event.pull_request.head.ref }}' || true
        env:
          GITHUB_TOKEN: ${{ secrets.FLOWZONE_TOKEN }}
  github_publish:
    name: Publish draft Github release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - project_types
      - versioned_source
      - github_prepare
      - npm_publish
      - cargo_publish
      - custom_publish
    if: |
      !failure() && !cancelled() &&
      needs.event_types.outputs.do_draft == 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          path: ${{ runner.temp }}
      - name: Check if any release artifacts exist
        id: gh_artifacts
        run: |
          set -ea

          artifact_count=0
          [ -d "$GH_ARTIFACTS" ] && \
              artifact_count=$(ls "$GH_ARTIFACTS" | wc -l | sed 's/^ *//;s/ *$//')
          echo "count=$artifact_count" >> $GITHUB_OUTPUT
        env:
          GH_ARTIFACTS: ${{ runner.temp }}/gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
      - name: Publish artifacts
        if: steps.gh_artifacts.outputs.count != '0'
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          name: ${{ github.event.pull_request.head.ref }}
          tag_name: ${{ github.event.pull_request.head.ref }}
          draft: true
          prerelease: true
          files: ${{ runner.temp }}/gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}/*
  github_finalize:
    name: Finalize GitHub release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Finalize GitHub release (if any)
        if: needs.versioned_source.outputs.version != ''
        run: |
          set -ea
          # prevent git from existing with 141
          set +o pipefail
          previous_tag="$(git tag --sort=-version:refname | head -n 2 | tail -n 1)"
          release_notes="$(git log ${previous_tag}..${{ github.event.pull_request.head.sha || github.event.head_commit.id }} --pretty=reference)"

          if gh release view '${{ github.event.pull_request.head.ref }}'; then
            gh release edit '${{ github.event.pull_request.head.ref }}' \
              --notes "${release_notes}" \
              --title 'v${{ needs.versioned_source.outputs.version }}' \
              --tag 'v${{ needs.versioned_source.outputs.version }}' \
              --prerelease='${{ inputs.github_prerelease }}' \
              --draft=false

            if [[ ${{ inputs.github_prerelease }} =~ false ]]; then
                release_id="$(gh api "/repos/${{ github.repository }}/releases/tags/v${{ needs.versioned_source.outputs.version }}" \
                  -H 'Accept: application/vnd.github+json' | jq -r .id)"
                gh api --method PATCH "/repos/${{ github.repository }}/releases/${release_id}" \
                  -H 'Accept: application/vnd.github+json' \
                  -F make_latest=true
            fi
          else
            echo "No release found for the current PR"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.FLOWZONE_TOKEN }}
  github_clean:
    name: Clean unused GitHub release
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      !failure() && !cancelled() &&
        needs.event_types.outputs.pr == 'true' &&
        github.event.pull_request.merged == false &&
        github.event.action == 'closed'
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Delete draft release
        run: gh release delete --yes '${{ github.event.pull_request.head.ref }}' || true
        env:
          GITHUB_TOKEN: ${{ secrets.FLOWZONE_TOKEN }}
  cargo_test:
    name: Test rust
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.cargo == 'true' &&
      join(fromJSON(needs.project_types.outputs.cargo_targets)) != ''
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.project_types.outputs.cargo_targets) }}
    outputs:
      package: ${{ steps.meta.outputs.package }}
      version: ${{ steps.meta.outputs.version }}
      branch_tag: ${{ steps.meta.outputs.branch_tag }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
      version_tag: ${{ steps.meta.outputs.version_tag }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set up toolchain ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --check
      - name: Install cross
        run: cargo install cross
      - name: Lint with clippy
        run: cross -v clippy --all-targets --all-features -- -D warnings
      - name: Run tests for toolchain ${{ matrix.target }}
        run: cross -v test --target ${{ matrix.target }}
      - name: Generate metadata
        id: meta
        run: |
          package="$(grep '^name = \"' Cargo.toml | awk -F[\"\"] '{print $2}')"
          version="${{ needs.versioned_source.outputs.version }}"
          branch_tag="$(echo '${{ github.event.pull_request.head.ref }}' | sed 's/[^[:alnum:]]/-/g')"
          sha_tag="${branch_tag}-${{ github.event.pull_request.head.sha }}"
          version_tag="${version}-${branch_tag}-${{ github.event.pull_request.head.sha }}"

          echo "package=${package}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "branch_tag=${branch_tag}" >> $GITHUB_OUTPUT
          echo "sha_tag=${sha_tag}" >> $GITHUB_OUTPUT
          echo "version_tag=${version_tag}" >> $GITHUB_OUTPUT
  cargo_publish:
    name: Build rust release artifacts
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - project_types
      - versioned_source
      - cargo_test
      - custom_test
    if: |
      !failure() && !cancelled() &&
      needs.event_types.outputs.do_draft == 'true' &&
      needs.cargo_test.result == 'success' &&
      join(fromJSON(needs.project_types.outputs.cargo_targets)) != '' &&
      inputs.rust_binaries == true
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
        shell: bash --noprofile --norc -eo pipefail -x {0}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.project_types.outputs.cargo_targets) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set up toolchain ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross
        run: cargo install cross
      - name: Build release for toolchain ${{ matrix.target }}
        run: cross -v build --release --target ${{ matrix.target }}
      - name: Install LLVM
        run: sudo apt-get install -y llvm
      - name: LLVM strip
        run: llvm-strip target/${{ matrix.target }}/release/${{ needs.cargo_test.outputs.package }}
      - name: Compress
        run: |
          tar -czvf ${{ needs.cargo_test.outputs.package }}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${{ needs.cargo_test.outputs.package }}
      - name: Upload artifact
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb
        with:
          name: gh-release-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ needs.cargo_test.outputs.package }}-${{ matrix.target }}.tar.gz
          retention-days: 1
  cargo_finalize:
    name: Finalize rust
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      needs.project_types.outputs.cargo == 'true' &&
      join(fromJSON(needs.project_types.outputs.cargo_targets)) != ''
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set up toolchain ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
      - name: Publish crate to ${{ env.CARGO_REGISTRY }}
        run: |
          if [ -n "$CARGO_REGISTRY_TOKEN" ]; then
            cargo publish
          fi
        env:
          CARGO_REGISTRY_DEFAULT: ${{ env.CARGO_REGISTRY }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  custom_test:
    name: Test custom
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.custom_test == 'true'
    strategy:
      fail-fast: false
      matrix:
        value: ${{ fromJSON(needs.project_types.outputs.custom_test_matrix) }}
        os: ${{ fromJSON(inputs.tests_run_on) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set the matrix value env var
        run: |
          echo "matrix_value=${{ matrix.value }}" >> $GITHUB_ENV
          echo "os_value=${{ matrix.os }}" >> $GITHUB_ENV
      - uses: ./.github/actions/test
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
  custom_publish:
    name: Publish custom
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
      - npm_test
      - docker_test
      - cargo_test
      - custom_test
    if: |
      !failure() && !cancelled() &&
      needs.event_types.outputs.do_draft == 'true' &&
      needs.project_types.outputs.custom_publish == 'true'
    strategy:
      fail-fast: false
      matrix:
        value: ${{ fromJSON(needs.project_types.outputs.custom_publish_matrix) }}
        os: ${{ fromJSON(inputs.tests_run_on) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set the matrix value env var
        run: |
          echo "matrix_value=${{ matrix.value }}" >> $GITHUB_ENV
          echo "os_value=${{ matrix.os }}" >> $GITHUB_ENV
      - uses: ./.github/actions/publish
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
  custom_finalize:
    name: Finalize custom
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      needs.project_types.outputs.custom_finalize == 'true'
    strategy:
      fail-fast: false
      matrix:
        value: ${{ fromJSON(needs.project_types.outputs.custom_finalize_matrix) }}
        os: ${{ fromJSON(inputs.tests_run_on) }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Set the matrix value env var
        run: |
          echo "matrix_value=${{ matrix.value }}" >> $GITHUB_ENV
          echo "os_value=${{ matrix.os }}" >> $GITHUB_ENV
      - uses: ./.github/actions/finalize
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
  custom_clean:
    name: Clean custom
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(inputs.tests_run_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - project_types
      - versioned_source
    if: |
      needs.event_types.outputs.do_clean == 'true' &&
      needs.project_types.outputs.custom_clean == 'true'
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: ./.github/actions/clean
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
  custom_always:
    name: Always custom
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJSON(inputs.tests_run_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
      - custom_test
      - custom_publish
      - custom_finalize
      - custom_clean
    if: |
      always() &&
      needs.project_types.outputs.custom_always == 'true'
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - uses: ./.github/actions/always
        with:
          json: ${{ toJSON(inputs) }}
          secrets: ${{ toJSON(secrets) }}
  protect_branch:
    name: Protect branch
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - balena_publish
      - custom_publish
      - custom_test
      - python_test
      - docker_test
      - event_types
      - npm_publish
      - npm_test
      - cargo_test
      - cargo_publish
      - github_publish
      - project_types
      - versioned_source
      - website_build
    if: |
      always() &&
      needs.event_types.outputs.do_draft == 'true' &&
      inputs.protect_branch == true
    outputs:
      result: ${{ steps.apply_branch_protection_rules.outputs.result }}
    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}
    env:
      BRANCH_PROTECTION_URI: repos/${{ github.repository }}/branches/${{ github.event.repository.default_branch }}/protection
      GH_TOKEN: ${{ secrets.FLOWZONE_TOKEN }}
    steps:
      - name: Download source artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: source-${{ github.event.pull_request.head.sha || github.event.head_commit.id }}
          path: ${{ runner.temp }}
      - name: Extract source artifact
        shell: pwsh
        working-directory: .
        run: tar -xvf ${{ runner.temp }}/source.tgz
      - name: Check needed jobs
        run: |
          for result in $(echo '${{ toJSON(needs.*.result) }}' | jq -cr '.[]')
          do
            test "${result}" = "success" && continue
            test "${result}" = "skipped" && continue
            echo "Needed job returned result: ${result}"
            exit 1
          done
      - name: Get protection rules
        id: get_protection_rules
        run: |
          result="$(gh api ${{ env.BRANCH_PROTECTION_URI }} || true)"
          message="$(echo "${result}" | jq -r .message)"

          if [[ "$message" =~ null ]]; then
            echo "result=$(echo "${result}" | jq '. | @json')" >> $GITHUB_OUTPUT
          elif [[ -z "$message" ]] || [[ "$message" =~ 'Not Found'|'Branch not protected' ]]; then
            # If there are no existing protections then use an empty object
            echo 'result={}' >> $GITHUB_OUTPUT
          else
            echo  "::error::Failed to get branch protection rules ${message} ${result} "
            exit 1
          fi
      - name: Parse and prepare protection rules
        id: parse_prepare_protection_rules
        if: ${{ steps.get_protection_rules.conclusion == 'success' }}
        run: |
          jsondata=${{ steps.get_protection_rules.outputs.result }}

          required_status_checks__strict=$(echo $jsondata | jq ".required_status_checks.strict // true")

          # Filter all Flowzone or ResinCI checks
          # leave other checks (eg jenkins)
          # add hard coded flowzone checks back
          required_status_checks__contexts=$(echo $jsondata | \
            jq ".required_status_checks.contexts // [] | del(.[] | \
            select(ascii_downcase | startswith(\"${{ inputs.job_name }}\") or startswith(\"resinci\"))) |\
            . + [ \
              \"${{ inputs.job_name }} / Protect branch\", \
              \"${{ inputs.job_name }} / Project types\", \
              \"${{ inputs.job_name }} / Versioned source\", \
              \"${{ inputs.job_name }} / Event types\" \
            ]")

          required_pull_request_reviews__dismiss_stale_reviews=$(echo $jsondata | jq ".required_pull_request_reviews.dismiss_stale_reviews // false")
          required_pull_request_reviews__require_code_owner_reviews=$(echo $jsondata | jq ".required_pull_request_reviews.require_code_owner_reviews // false")
          required_pull_request_reviews__dismissal_restrictions__users=$(echo $jsondata | jq ".required_pull_request_reviews.dismissal_restrictions.users // []")
          required_pull_request_reviews__dismissal_restrictions__teams=$(echo $jsondata | jq ".required_pull_request_reviews.dismissal_restrictions.teams // []")
          required_pull_request_reviews__dismissal_restrictions__apps=$(echo $jsondata | jq ".required_pull_request_reviews.dismissal_restrictions.apps // []")
          allow_force_pushes=$(echo $jsondata | jq ".allow_force_pushes.enabled // false")
          required_signatures=$(echo $jsondata | jq ".required_signatures.enabled // false")
          allow_deletions=$(echo $jsondata | jq ".allow_deletions.enabled // false")
          required_linear_history=$(echo $jsondata | jq ".required_linear_history.enabled // false")
          enforce_admins=$(echo $jsondata | jq ".enforce_admins.enabled // false")
          block_creations=$(echo $jsondata | jq ".block_creations.enabled // false")
          required_conversation_resolution=$(echo $jsondata | jq ".required_conversation_resolution.enabled // false")

          newjson=$(cat <<-END
            {
              "required_status_checks": {
                  "strict": ${required_status_checks__strict},
                  "contexts": ${required_status_checks__contexts}
              },
              "required_pull_request_reviews": {
                  "dismissal_restrictions": {
                      "users": ${required_pull_request_reviews__dismissal_restrictions__users},
                      "teams": ${required_pull_request_reviews__dismissal_restrictions__teams},
                      "apps": ${required_pull_request_reviews__dismissal_restrictions__apps}
                  },
                  "dismiss_stale_reviews": ${required_pull_request_reviews__dismiss_stale_reviews},
                  "require_code_owner_reviews": ${required_pull_request_reviews__require_code_owner_reviews},
                  "required_approving_review_count": ${{ inputs.required_approving_review_count }},
                  "bypass_pull_request_allowances": {
                      "users": [],
                      "teams": []
                  }
              },
              "enforce_admins": ${enforce_admins},
              "required_signatures": ${required_signatures},
              "restrictions": null,
              "required_linear_history": ${required_linear_history},
              "allow_force_pushes": ${allow_force_pushes},
              "allow_deletions": ${allow_deletions},
              "block_creations": ${block_creations},
              "required_conversation_resolution": ${required_conversation_resolution}
            }
          END
          )

          # unsupported restrictions outside of Github organisations
          if [[ -z '${{ github.event.organization }}' ]]; then
              newjson="$(echo "${newjson}" | jq -r 'del(.required_pull_request_reviews.dismissal_restrictions, .required_pull_request_reviews.bypass_pull_request_allowances)')"
          fi

          result=$(echo "${newjson}" | jq '. | @json' )
          echo "result=${result}" >> $GITHUB_OUTPUT
      - name: Apply branch protection rules
        id: apply_branch_protection_rules
        if: ${{ steps.parse_prepare_protection_rules.conclusion == 'success' }}
        run: |
          result="$(echo '${{ fromJSON(steps.parse_prepare_protection_rules.outputs.result) }}' \
            | gh api --method PUT ${{ env.BRANCH_PROTECTION_URI }} --input -)"

          message="$(echo "${result}" | jq -r .message)"

          if ! [[ $message =~ null ]]; then
            echo "::error::Failed to apply branch protection rules with ${message} ${result} "
            exit 1
          fi

          # here the number of required approvals sent to the gh API is checked back from the PUT response from GH api
          # Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers (successful checks => merge) .
          if [[ $(echo "$result" | jq '.required_pull_request_reviews.required_approving_review_count') -ne ${{ inputs.required_approving_review_count }} ]]; then
            echo "::warning::Failed to set required approvers count. Check that branch protection is enabled on your repo and try again."
          fi

          DELIMITER=$(echo $RANDOM | md5sum | head -c 32)
          echo "result<<${DELIMITER}" >> $GITHUB_OUTPUT
          echo "${result}" >> $GITHUB_OUTPUT
          echo "${DELIMITER}" >> $GITHUB_OUTPUT
      - name: Enable PR auto-merge
        if: github.event.pull_request.draft == false
        run: |
          if [[ $(gh api '/repos/${{ github.repository }}' | jq -r .allow_auto_merge) =~ true ]]; then
              if [[ ${{ inputs.required_approving_review_count }} -gt 0 ]]; then
                  gh pr merge ${{ github.event.pull_request.number }} --merge --auto
              fi
          fi
  repo_config:
    name: Standardise repository settings
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ fromJSON(inputs.jobs_timeout_minutes) }}
    needs:
      - event_types
    if: |
      needs.event_types.outputs.do_final == 'true' &&
      inputs.repo_config == true
    steps:
      - name: Configure repository
        run: |
          # only change repository visibility if explicitly set to one of the permissible values
          visibility=''
          if [[ '${{ inputs.repo_visibility }}' =~ private|public|internal ]]; then
              gh repo edit '${{ github.repository }}' \
                --visibility '${{ inputs.repo_visibility }}'
          fi

          if [[ -n '${{ inputs.repo_description }}' ]]; then
              gh repo edit '${{ github.repository }}' \
                --description '${{ inputs.repo_description }}'
          fi

          if [[ -n '${{ inputs.repo_homepage }}' ]]; then
              homepage='${{ inputs.repo_homepage }}'
          elif [[ -n '${{ inputs.cloudflare_website }}' ]]; then
              homepage='https://${{ inputs.cloudflare_website }}.pages.dev'
          else
              homepage=''
          fi
          [[ -n "${homepage}" ]] && gh repo edit '${{ github.repository }}' \
            --homepage "${homepage}"

          # HTTP 422: This organization does not allow private repository forking
          if ! gh repo edit '${{ github.repository }}' \
            --allow-forking=${{ inputs.repo_allow_forking }}; then
              echo '::warning::Failed to configure some repository settings.'
          fi

          # FIXME: https://github.com/cli/cli/issues/6652#issuecomment-1323908232
          gh repo edit '${{ github.repository }}' \
            --default-branch=${{ inputs.repo_default_branch }} \
            --delete-branch-on-merge=${{ inputs.repo_delete_branch_on_merge }} \
            --enable-auto-merge=${{ inputs.repo_enable_auto_merge }} \
            --enable-issues=${{ inputs.repo_enable_issues }} \
            --enable-merge-commit=${{ inputs.repo_enable_merge_commit }} \
            --enable-projects=${{ inputs.repo_enable_projects }} \
            --enable-rebase-merge=${{ inputs.repo_enable_rebase_merge }} \
            --enable-squash-merge=${{ inputs.repo_enable_squash_merge }} \
            --enable-wiki=${{ inputs.repo_enable_wiki }}

          # allow_update_branch not currently available for update via gh-cli
          gh api --method PATCH '/repos/${{ github.repository }}' \
            -H "Accept: application/vnd.github+json" \
            -F allow_update_branch='${{ inputs.repo_allow_update_branch }}'
        env:
          GH_TOKEN: ${{ secrets.FLOWZONE_TOKEN }}
